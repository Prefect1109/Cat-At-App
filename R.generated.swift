//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 7 storyboards.
  struct storyboard {
    /// Storyboard `BreedDetailedVC`.
    static let breedDetailedVC = _R.storyboard.breedDetailedVC()
    /// Storyboard `BreedListVC`.
    static let breedListVC = _R.storyboard.breedListVC()
    /// Storyboard `FinalScoreVC`.
    static let finalScoreVC = _R.storyboard.finalScoreVC()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `QuizVC`.
    static let quizVC = _R.storyboard.quizVC()
    /// Storyboard `RulesVC`.
    static let rulesVC = _R.storyboard.rulesVC()
    /// Storyboard `WelcomeVC`.
    static let welcomeVC = _R.storyboard.welcomeVC()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BreedDetailedVC", bundle: ...)`
    static func breedDetailedVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.breedDetailedVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "BreedListVC", bundle: ...)`
    static func breedListVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.breedListVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "FinalScoreVC", bundle: ...)`
    static func finalScoreVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.finalScoreVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "QuizVC", bundle: ...)`
    static func quizVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.quizVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "RulesVC", bundle: ...)`
    static func rulesVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.rulesVC)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "WelcomeVC", bundle: ...)`
    static func welcomeVC(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.welcomeVC)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 3 colors.
  struct color {
    /// Color `BrandColor`.
    static let brandColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "BrandColor")
    /// Color `SecondColor`.
    static let secondColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "SecondColor")
    /// Color `Third Color`.
    static let thirdColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "Third Color")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "BrandColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func brandColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.brandColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "SecondColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func secondColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.secondColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Third Color", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func thirdColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.thirdColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "BrandColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func brandColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.brandColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "SecondColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func secondColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.secondColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Third Color", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func thirdColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.thirdColor.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 6 images.
  struct image {
    /// Image `Heart`.
    static let heart = Rswift.ImageResource(bundle: R.hostingBundle, name: "Heart")
    /// Image `LogoPhoto`.
    static let logoPhoto = Rswift.ImageResource(bundle: R.hostingBundle, name: "LogoPhoto")
    /// Image `brokeHeart`.
    static let brokeHeart = Rswift.ImageResource(bundle: R.hostingBundle, name: "brokeHeart")
    /// Image `hiclipart.com`.
    static let hiclipartCom = Rswift.ImageResource(bundle: R.hostingBundle, name: "hiclipart.com")
    /// Image `jpgCat`.
    static let jpgCat = Rswift.ImageResource(bundle: R.hostingBundle, name: "jpgCat")
    /// Image `kindpng_4305250`.
    static let kindpng_4305250 = Rswift.ImageResource(bundle: R.hostingBundle, name: "kindpng_4305250")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Heart", bundle: ..., traitCollection: ...)`
    static func heart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.heart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "LogoPhoto", bundle: ..., traitCollection: ...)`
    static func logoPhoto(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.logoPhoto, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "brokeHeart", bundle: ..., traitCollection: ...)`
    static func brokeHeart(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.brokeHeart, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "hiclipart.com", bundle: ..., traitCollection: ...)`
    static func hiclipartCom(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.hiclipartCom, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "jpgCat", bundle: ..., traitCollection: ...)`
    static func jpgCat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.jpgCat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "kindpng_4305250", bundle: ..., traitCollection: ...)`
    static func kindpng_4305250(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.kindpng_4305250, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `BreedTableViewCell`.
    static let breedTableViewCell = _R.nib._BreedTableViewCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "BreedTableViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.breedTableViewCell) instead")
    static func breedTableViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.breedTableViewCell)
    }
    #endif

    static func breedTableViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BreedTableViewCell? {
      return R.nib.breedTableViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BreedTableViewCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `newCatBreedCell`.
    static let newCatBreedCell: Rswift.ReuseIdentifier<BreedTableViewCell> = Rswift.ReuseIdentifier(identifier: "newCatBreedCell")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 1 localization keys.
    struct localizable {
      /// en translation: Cat at app
      ///
      /// Locales: en, uk
      static let welcome_title = Rswift.StringResource(key: "welcome_title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "uk"], comment: nil)

      /// en translation: Cat at app
      ///
      /// Locales: en, uk
      static func welcome_title(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("welcome_title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "welcome_title"
        }

        return NSLocalizedString("welcome_title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _BreedTableViewCell.validate()
    }

    struct _BreedTableViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = BreedTableViewCell

      let bundle = R.hostingBundle
      let identifier = "newCatBreedCell"
      let name = "BreedTableViewCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> BreedTableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? BreedTableViewCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "kindpng_4305250", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kindpng_4305250' is used in nib 'BreedTableViewCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in nib 'BreedTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecondColor' is used in nib 'BreedTableViewCell', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Third Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Third Color' is used in nib 'BreedTableViewCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try breedDetailedVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try breedListVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try finalScoreVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try quizVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try rulesVC.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try welcomeVC.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct breedDetailedVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let breedDetailedVC = StoryboardViewControllerResource<BreedDetailedVC>(identifier: "BreedDetailedVC")
      let bundle = R.hostingBundle
      let name = "BreedDetailedVC"

      func breedDetailedVC(_: Void = ()) -> BreedDetailedVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: breedDetailedVC)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.left.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrowshape.turn.up.left.fill' is used in storyboard 'BreedDetailedVC', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in storyboard 'BreedDetailedVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecondColor' is used in storyboard 'BreedDetailedVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Third Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Third Color' is used in storyboard 'BreedDetailedVC', but couldn't be loaded.") }
        }
        if _R.storyboard.breedDetailedVC().breedDetailedVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'breedDetailedVC' could not be loaded from storyboard 'BreedDetailedVC' as 'BreedDetailedVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct breedListVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let breedListVC = StoryboardViewControllerResource<BreedListVC>(identifier: "BreedListVC")
      let bundle = R.hostingBundle
      let name = "BreedListVC"

      func breedListVC(_: Void = ()) -> BreedListVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: breedListVC)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.left.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrowshape.turn.up.left.fill' is used in storyboard 'BreedListVC', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in storyboard 'BreedListVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecondColor' is used in storyboard 'BreedListVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Third Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Third Color' is used in storyboard 'BreedListVC', but couldn't be loaded.") }
        }
        if _R.storyboard.breedListVC().breedListVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'breedListVC' could not be loaded from storyboard 'BreedListVC' as 'BreedListVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct finalScoreVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let finalScoreVC = StoryboardViewControllerResource<FinalScoreVC>(identifier: "FinalScoreVC")
      let name = "FinalScoreVC"

      func finalScoreVC(_: Void = ()) -> FinalScoreVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: finalScoreVC)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in storyboard 'FinalScoreVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecondColor' is used in storyboard 'FinalScoreVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Third Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Third Color' is used in storyboard 'FinalScoreVC', but couldn't be loaded.") }
        }
        if _R.storyboard.finalScoreVC().finalScoreVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'finalScoreVC' could not be loaded from storyboard 'FinalScoreVC' as 'FinalScoreVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "LogoPhoto", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'LogoPhoto' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct quizVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "QuizVC"
      let quizVC = StoryboardViewControllerResource<QuizVC>(identifier: "QuizVC")

      func quizVC(_: Void = ()) -> QuizVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: quizVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart' is used in storyboard 'QuizVC', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.left.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrowshape.turn.up.left.fill' is used in storyboard 'QuizVC', but couldn't be loaded.") } }
        if UIKit.UIImage(named: "kindpng_4305250", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'kindpng_4305250' is used in storyboard 'QuizVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in storyboard 'QuizVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecondColor' is used in storyboard 'QuizVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Third Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Third Color' is used in storyboard 'QuizVC', but couldn't be loaded.") }
        }
        if _R.storyboard.quizVC().quizVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'quizVC' could not be loaded from storyboard 'QuizVC' as 'QuizVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct rulesVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "RulesVC"
      let rulesVC = StoryboardViewControllerResource<RulesVC>(identifier: "RulesVC")

      func rulesVC(_: Void = ()) -> RulesVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: rulesVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "Heart", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Heart' is used in storyboard 'RulesVC', but couldn't be loaded.") }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "arrowshape.turn.up.left.fill") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'arrowshape.turn.up.left.fill' is used in storyboard 'RulesVC', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in storyboard 'RulesVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecondColor' is used in storyboard 'RulesVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Third Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Third Color' is used in storyboard 'RulesVC', but couldn't be loaded.") }
        }
        if _R.storyboard.rulesVC().rulesVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'rulesVC' could not be loaded from storyboard 'RulesVC' as 'RulesVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct welcomeVC: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "WelcomeVC"
      let welcomeVC = StoryboardViewControllerResource<WelcomeVC>(identifier: "WelcomeVC")

      func welcomeVC(_: Void = ()) -> WelcomeVC? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: welcomeVC)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "jpgCat", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'jpgCat' is used in storyboard 'WelcomeVC', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "BrandColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'BrandColor' is used in storyboard 'WelcomeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "SecondColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'SecondColor' is used in storyboard 'WelcomeVC', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Third Color", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Third Color' is used in storyboard 'WelcomeVC', but couldn't be loaded.") }
        }
        if _R.storyboard.welcomeVC().welcomeVC() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'welcomeVC' could not be loaded from storyboard 'WelcomeVC' as 'WelcomeVC'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
